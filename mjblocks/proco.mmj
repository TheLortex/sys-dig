const ram_value_size = 32;
const reg_size = 32;
const nb_bit_addr_reg = 4;
const ram_addr_size = 6;

#include "power.mj"
#include "ram_rom_access.mj"
#include "reg_access.mj"
#include "flags_checker.mj"
#include "barrel.mj"
#include "alu.mj"
#include "increment.mj"
#include "7seg.mj"


(* Read op2 from opcode, and return the correct value*)

read_op2(carry, is_immediate, code:[12]) = (c_out, value_out:[reg_size]) where

  (* If op2 is a shifted immediate : *)
  immediate_value = power<24>(0) . code[4..11];
  immediate_shift_code = 0 . 1;
  immediate_shift_value = power<3>(0) . code[0..3] . 0;


  (* If op2 is a register shifted by an immediate, or by another register *)
  reg_value = reg_read(code[8..11]);
  reg_shift_code = code[5..6];
  reg_shift_reg = reg_read(code[0..3]);
  reg_shift_value = mux_n<8>(code[7], power<3>(0).code[0..4], reg_shift_reg[24..31]);


  value = mux_n<32>(is_immediate, reg_value, immediate_value);
  shift_code = mux_n<2>(is_immediate, reg_shift_code, immediate_shift_code);
  shift_value = mux_n<8>(is_immediate, reg_shift_value, immediate_shift_value);
  (c_out,value_out) = barrel<8, reg_size>(carry,shift_code,shift_value,value,not is_immediate);
end where



(* main function *)

main() = (sec0:[7], sec1:[7], min0:[7], min1:[7], hour0:[7], hour1:[7], day0:[7], day1:[7], month0:[7], month1:[7], isbissextile, lastpc:[32], r14:[32], alu_input_1:[32], alu_input_2:[32], alu_output:[32]) where

    (* We set the flags from precedent cycle *)
    flagN = reg(newFlagN);
    flagZ = reg(newFlagZ);
    flagC = reg(newFlagC);
    flagV = reg(newFlagV);

    (* The program counter is in r15 *)
    temp1 = 1.1;
    pc_addr = temp1.temp1;
    pc = reg_read(pc_addr);

    (* The current assembly instruction to execute *)
    instruction = rom_read<ram_addr_size,ram_value_size>(pc[reg_size-ram_addr_size..reg_size-1]);

    (* Conditionnal part of instruction *)
    cond = instruction[0..3];
    shouldRun = test_condition(cond,flagZ,flagC,flagN,flagV);


    (* Find the current instruction type to execute *)
    is_ram_instruction = instruction[5];
    is_logical_instruction = (not instruction[4]) & (not instruction[5]);
    is_branch_instruction = instruction[4] & (not instruction[5]) & instruction[6];


    (* If the instruction is an arithmetical operation *)
    is_immediate = instruction[6];
    opcode_logical_instruction = instruction[7..10];
    modify_flags = instruction[11];

    is_cmn_or_cmp = (not opcode_logical_instruction[0]) and opcode_logical_instruction[1] and (not opcode_logical_instruction[2]);
    is_tst = opcode_logical_instruction[0] and (not opcode_logical_instruction[1]) and (not opcode_logical_instruction[2]) and opcode_logical_instruction[3];
    is_teq = opcode_logical_instruction[0] and opcode_logical_instruction[1] and opcode_logical_instruction[2] and opcode_logical_instruction[3];
    modify_reg = not (is_cmn_or_cmp or is_tst or is_teq);


    rd_addr = instruction[12..15];
    r1_addr = instruction[16..19];
    op1 = reg_read(r1_addr);
    (newC,op2) = read_op2(flagC, is_immediate, instruction[20..31]); (*Récupère les informations et applique le shift*)

    (* If the instruction is a branching operation *)
    branch_offset = power<8>(instruction[8]) . instruction[8..31];
    is_branch_and_link = instruction[7];
    temp2 = 0.0;
    opcode_branch = temp2.temp2;


    (* ALU operations *)
    alu_input_1 = mux_n<reg_size>(is_branch_instruction,op1,pc);
    alu_input_2 = mux_n<reg_size>(is_branch_instruction,op2,branch_offset);
    alu_opcode_logical_instruction = mux_n<4>(is_branch_instruction,opcode_logical_instruction,opcode_branch);
    (alu_output, flags) = alu <reg_size>(alu_input_1, alu_input_2, alu_opcode_logical_instruction, flagC);


    pcincr = increment<reg_size>(1,pc);
    rd_is_pc = rd_addr[0] and rd_addr[1] and rd_addr[2] and rd_addr[3];

    useless = reg_write(modify_reg and is_logical_instruction,rd_addr, alu_output);
    useless2 = reg_write(is_branch_instruction, pc_addr, alu_output);
    useless3 = reg_write(is_branch_instruction and is_branch_and_link, 1.1.1.0, pcincr);
    useless4 = reg_write((not is_branch_instruction) and (not (modify_reg and rd_is_pc)), pc_addr, pcincr);


    (* We modify the flags if necessary for next cycle *)
    f = modify_flags & not(is_ram_instruction);
    newFlagN = mux(f,flagN,flags[0]);
    newFlagZ = mux(f,flagZ,flags[1]);
    newFlagC = mux(f,flagC,flags[2]);
    newFlagV = mux(f,flagV,flags[3]);

    r0 = reg_read(0.0.0.0);
    r1 = reg_read(0.0.0.1);
    r2 = reg_read(0.0.1.0);
    r14 = reg_read(1.1.1.0);

    c1 = 0;
    c2 = c1.c1;
    c3 = c2.0;

    sec0 = seg7(c1.r0[29..31]);
    sec1 = seg7(r0[25..28]);
    min0 = seg7(c1.r0[22..24]);
    min1 = seg7(r0[18..21]);
    hour0 = seg7(c2.r0[16..17]);
    hour1 = seg7(r0[12..15]);
    day0 = seg7(c2.r0[10..11]);
    day1 = seg7(r0[6..9]);
    month0 = seg7(c3.r0[5]);
    month1 = seg7(r0[1..4]);
    isbissextile = r0[0];

    lastpc = reg_read(1.1.1.1);
end where
