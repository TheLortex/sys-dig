
const size = 5

fulladder(a,b,c) = (s, r) where
  s = (a ^ b) ^ c;
  r = (a & b) + ((a ^ b) & c);
end where

add<n>(a:[n], b:[n], c_in) = (o:[n], f_out:[4]) where
  if n = 0 then
    o = [];
		n = 0;
		z = 1;
		c = c_in;
		v = 0;
		f_out = n.z.c.v;
  else
    (s_n1, f_n1) = add<n-1>(a[1..], b[1..], c_in);
    (s_0, c_out) = fulladder(a[0], b[0], f_n1[2]);
    o = s_0 . s_n1;
		n = s_0;
		z = not(s_0) & f_n1[1];
		c = c_out;
		v = c_out ^ f_n1[2]; (* # l'astuce du prof *)
		f_out = n.z.c.v;
  end if
end where

incr<n>(a:[n]) = (o:[n],c) where
  if n = 0 then
		o = [];
		c = 1
	else
		(o_n1, c_n1) = incr<n-1>(a[1..]);
		o_n = a[0] ^ c_n1;
		c   = a[0] & c_n1;
		o = o_n . o_n1
	end if
end where


get_flags<n>(a:[n]) = (o:[2]) where
	if n = 0 then
		o = 0 . 1;
	else
		f_n1 = get_flags<n-1>(a[1..]);
		o = a[0] . (not(a[0]) and f_n1[1]);
	end if
end where

alu<n>(op1:[n], op2:[n], opcode:[4], carry) = (ret:[n],flags:[4]) where
	p0						= not_n<n>(op1);
	p1						= not_n<n>(op2);
	(neg_op1, t)	= incr<n>(p0);
	(neg_op2, f)	= incr<n>(p1);


	(*Section 0XXX*)
	(*0000: ADD*)
	(*0001: ADC*)
	(*0010: RSB*)
	(*0011: RSC*)
	(*0101: CMP*)
	(*0100: CMN*)
	(*0110: SUB*)
	(*0111: SBC*)

	in1 = mux_n<n>(opcode[1], op2, op1);
	in2 = mux_n<n>(opcode[1],
					mux_n<n>(opcode[2],op1,neg_op1),
					mux_n<n>(opcode[2],
						mux_n<n>(opcode[3],
						 op2,
						 neg_op2
						 ),
					 	neg_op2));

	c_in = mux(opcode[1] & not(opcode[2]), mux(opcode[3], 0, carry), 0);

	(r0XXX,f0XXX) = add<n>(in1,in2,c_in);

	(*Section 1XXX*)
  r100X = and_n<n>(op1,op2);
  r111X = xor_n<n>(op1,op2);
  r1010 = or_n<n>(op1,op2);
  r1011 = not_n<n>(and_n<n>(op1,op2));
  r1100 = p1;
  r1101 = op2;

  r101X = mux_n<n>(opcode[3],r1010,r1011);
  r110X = mux_n<n>(opcode[3],r1100,r1101);

  r10XX = mux_n<n>(opcode[2],r100X,r101X);
  r11XX = mux_n<n>(opcode[2],r110X,r111X);

  r1XXX = mux_n<n>(opcode[1],r10XX,r11XX);
  f1XXX = get_flags<n>(r1XXX) . 0 . 0;

  ret   = mux_n<n>(opcode[0],r0XXX,r1XXX);
  flags = mux_n<4>(opcode[0],f0XXX,f1XXX);
end where


main(op1:[size], op2:[size], opcode:[4], carry) = (ret:[size],flags:[4]) where
	(ret, flags) = alu<size>(op1, op2, opcode, carry)
end where
